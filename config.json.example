/**
 * An example local configuration for the test suite. To use:
 *
 * 1. Copy this file to one called config.json.
 * 2. Modify the file and replace with appropriate values for your system.
 * 3. npm install
 * 4. npm test
 * 5. Rename results.json to YOUR_IMPLEMENTATION-results.json into the
 *    implementations/ directory.
 * 6. git add implementations/YOUR_IMPLEMENTATION-results.json and submit a
 *    pull request for your implementation.
 */
{
   // The following binary will, given an input file, produce a valid
   // Verifiable Credentials Data Model document.
   // use "type" on Windows as a "cat" replacement
   "generator":"/bin/cat",

   // The following binary will, given an input file, produce a valid
   // Verifiable Presentation Data Model document.
   // use "type" on Windows as a "cat" replacement
   "presentationGenerator":"/bin/cat",

   // The arguments that should be passed to the VC generator.
   "generatorOptions":"",

   // This section overrides the above binary settings in favor of a
   // REST API for credential issuance and presentation
   "restapi": {
      // URL of REST API
      "baseUrl": "https://example.com",
      // Issuance endpoint
      "generator": "/credentials/issue",
      // Presentation endpoint
      "presentationGenerator": "/presentations/prove",
      // Options to be based in request body
      "generatorOptions": {},
      // Authorization token type
      "oauthTokenType": "Bearer",
      // Authorization token
      "oauthToken": ""
   },

   // Add section features you are explicitly not supporting
   // For example, to exclude all features, you would:
   // "sectionsNotSupported": ["basic", ""schema", "refresh", "evidence", "status", "tou", "ldp", "jwt", "zkp"]
   "sectionsNotSupported": [],

   // The following JSON object is used to configure JWT test cases. The test cases will derive the following
   // parameters from the JSON object:
   // --jwt <base64-encoded-keys> ... generators can choose between RS256 and ES256K private keys to generate JWS
   //                                 for verifiable credentials and presentations. <base6e-encoded-keys> contains
   //                                 a base64encoded JSON object containing es256kPrivateKeyJwk and rs256PrivateKeyJwk.
   // --jwt-aud <aud>             ... generators have to use <aud> as the aud attribute in all JWTs
   // --jwt-no-jws                ... generators have to suppress the JWS although keys are present
   // --jwt-presentation          ... generators have to generate a verifiable presentation
   // --jwt-decode                ... generators have to generate a credential from a JWT verifiable credential. The
   //                                 input file will be a JWT instead of a JSON-LD file.
   "jwt":{
      // according to https://tools.ietf.org/html/rfc7518
      "es256kPrivateKeyJwk":{
         "kty":"EC",
         "kid":"did:example:0xab#verikey-1",
         "crv":"P-256K",
         "x":"7KEKZa5xJPh7WVqHJyUpb2MgEe3nA8Rk7eUlXsmBl-M",
         "y":"3zIgl_ml4RhapyEm5J7lvU-4f5jiBvZr4KgxUjEhl9o",
         "key_ops":[
            "sign",
            "verify"
         ],
         "d":"IQkxsrZICFvhYEe6ft3wk-LISUUkcFj5uScVQAUGizo"
      },
      // according to https://tools.ietf.org/html/rfc7518
      "rs256PrivateKeyJwk":{
         "kty":"RSA",
         "n":"0vx7agoebGcQSuuPiLJXZptN9nndrQmbXEps2aiAFbWhM78LhWx4cbbfAAtVT86zwu1RK7aPFFxuhDR1L6tSoc_BJECPebWKRXjBZCiFV4n3oknjhMstn64tZ_2W-5JsGY4Hc5n9yBXArwl93lqt7_RN5w6Cf0h4QyQ5v-65YGjQR0_FDW2QvzqY368QQMicAtaSqzs8KJZgnYb9c7d0zgdAZHzu6qMQvRL5hajrn1n91CbOpbISD08qNLyrdkt-bFTWhAI4vMQFh6WeZu0fM4lFd2NcRwr3XPksINHaQ-G_xBniIqbw0Ls1jF44-csFCur-kEgU8awapJzKnqDKgw",
         "e":"AQAB",
         "d":"X4cTteJY_gn4FYPsXB8rdXix5vwsg1FLN5E3EaG6RJoVH-HLLKD9M7dx5oo7GURknchnrRweUkC7hT5fJLM0WbFAKNLWY2vv7B6NqXSzUvxT0_YSfqijwp3RTzlBaCxWp4doFk5N2o8Gy_nHNKroADIkJ46pRUohsXywbReAdYaMwFs9tv8d_cPVY3i07a3t8MN6TNwm0dSawm9v47UiCl3Sk5ZiG7xojPLu4sbg1U2jx4IBTNBznbJSzFHK66jT8bgkuqsk0GjskDJk19Z4qwjwbsnn4j2WBii3RL-Us2lGVkY8fkFzme1z0HbIkfz0Y6mqnOYtqc0X4jfcKoAC8Q",
         "p":"83i-7IvMGXoMXCskv73TKr8637FiO7Z27zv8oj6pbWUQyLPQBQxtPVnwD20R-60eTDmD2ujnMt5PoqMrm8RfmNhVWDtjjMmCMjOpSXicFHj7XOuVIYQyqVWlWEh6dN36GVZYk93N8Bc9vY41xy8B9RzzOGVQzXvNEvn7O0nVbfs",
         "q":"3dfOR9cuYq-0S-mkFLzgItgMEfFzB2q3hWehMuG0oCuqnb3vobLyumqjVZQO1dIrdwgTnCdpYzBcOfW5r370AFXjiWft_NGEiovonizhKpo9VVS78TzFgxkIdrecRezsZ-1kYd_s1qDbxtkDEgfAITAG9LUnADun4vIcb6yelxk",
         "dp":"G4sPXkc6Ya9y8oJW9_ILj4xuppu0lzi_H7VTkS8xj5SdX3coE0oimYwxIi2emTAue0UOa5dpgFGyBJ4c8tQ2VF402XRugKDTP8akYhFo5tAA77Qe_NmtuYZc3C3m3I24G2GvR5sSDxUyAN2zq8Lfn9EUms6rY3Ob8YeiKkTiBj0",
         "dq":"s9lAH9fggBsoFR8Oac2R_E2gw282rT2kGOAhvIllETE1efrA6huUUvMfBcMpn8lqeW6vzznYY5SSQF7pMdC_agI3nG8Ibp1BUb0JUiraRNqUfLhcQb_d9GF4Dh7e74WbRsobRonujTYN1xCaP6TO61jvWrX-L18txXw494Q_cgk",
         "qi":"GyM_p6JrXySiz1toFgKbWV-JdI3jQ4ypu9rbMWx3rQJBfmt0FoYzgUIZEVFEcOqwemRN81zoDAaa-Bk0KWNGDjJHZDdDmFhW3AN7lI-puxk_mHZGJ11rxyR8O55XLSe3SPmRfKwZI6yU24ZxvQKFYItdldUKGzO6Ia6zTKhAVRU",
         "alg":"RS256",
         "kid":"did:example:0xab#verikey-1"
      },
      "aud":"did:example:0xcafe"
   }
}
